{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { GridColumnMenuItem } from './GridColumnMenuItem';\nimport { GridColumnMenuItemGroup } from './GridColumnMenuItemGroup';\nimport { normalize } from '../interfaces/GridSortSettings';\nimport { provideLocalizationService } from '@progress/kendo-react-intl';\nimport { messages, sortAscending, sortDescending } from '../messages';\n/**\n * @hidden\n */\n\nvar ASC_DIR = 'asc';\n/**\n * @hidden\n */\n\nvar DESC_DIR = 'desc';\n/**\n * @hidden\n */\n\nvar sortSeqMap = {\n  true: {\n    'asc': {\n      'asc': '',\n      'desc': 'desc'\n    },\n    'desc': {\n      'asc': 'asc',\n      'desc': ''\n    },\n    '': {\n      'asc': 'asc',\n      'desc': 'desc'\n    }\n  },\n  false: {\n    'asc': {\n      'asc': 'asc',\n      'desc': 'desc'\n    },\n    'desc': {\n      'asc': 'asc',\n      'desc': 'desc'\n    },\n    '': {\n      'asc': 'asc',\n      'desc': 'desc'\n    }\n  }\n};\n/**\n * @hidden\n */\n\nvar sortIndex = function sortIndex(field, sort) {\n  if (!sort) {\n    return -1;\n  }\n\n  return sort.findIndex(function (s) {\n    return s.field === field;\n  });\n};\n/**\n * @hidden\n */\n\n\nvar sortedAsc = function sortedAsc(sortedIndex, sort) {\n  return !!(sort && sortedIndex > -1 && sort[sortedIndex].dir === ASC_DIR);\n};\n/**\n * @hidden\n */\n\n\nvar sortedDesc = function sortedDesc(sortedIndex, sort) {\n  return !!(sort && sortedIndex > -1 && sort[sortedIndex].dir === DESC_DIR);\n};\n/**\n * @example\n * ```jsx\n * class ColumnMenu extends React.Component {\n *     render() {\n *         return (\n *         <div>\n *             <GridColumnMenuSort {...this.props} />\n *         </div>);\n *     }\n * }\n *\n * class App extends React.PureComponent {\n *     constructor(props) {\n *         super(props);\n *\n *         this.state = this.createAppState({\n *             take: 10,\n *             skip: 0\n *         });\n *     }\n *\n *     createAppState(dataState) {\n *         return {\n *             result: process(products.slice(0), dataState),\n *             dataState: dataState\n *         };\n *     }\n *\n *     dataStateChange = (event) => {\n *         this.setState(this.createAppState(event.data));\n *     }\n *\n *     render() {\n *         return (\n *             <div>\n *                 <Grid\n *                     data={this.state.result}\n *                     {...this.state.dataState}\n *                     onDataStateChange={this.dataStateChange}\n *                     sortable={true}\n *                     pageable={true}\n *                 >\n *                     <Column field=\"ProductID\" title=\"Product ID\" columnMenu={ColumnMenu}/>\n *                     <Column field=\"ProductName\" />\n *                 </Grid>\n *                 <br />\n *             </div>\n *         );\n *     }\n * }\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\n\nvar GridColumnMenuSort =\n/** @class */\nfunction (_super) {\n  __extends(GridColumnMenuSort, _super);\n\n  function GridColumnMenuSort() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.onAscClick = function (e) {\n      _this.onSort(e, ASC_DIR);\n\n      if (_this.props.onCloseMenu) {\n        _this.props.onCloseMenu();\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onDescClick = function (e) {\n      _this.onSort(e, DESC_DIR);\n\n      if (_this.props.onCloseMenu) {\n        _this.props.onCloseMenu();\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  GridColumnMenuSort.prototype.onSort = function (e, selectedDir) {\n    e.preventDefault();\n\n    if (!this.props.onSortChange) {\n      return;\n    }\n\n    var _a = this.props,\n        column = _a.column,\n        sortable = _a.sortable,\n        sort = _a.sort;\n\n    var _b = normalize(sortable || false, false),\n        allowUnsort = _b.allowUnsort,\n        mode = _b.mode;\n\n    var oldDescriptor = (sort || []).filter(function (d) {\n      return d.field === column.field;\n    })[0];\n    var dir = sortSeqMap[allowUnsort][oldDescriptor && oldDescriptor.dir || ''][selectedDir];\n    var newDescriptor = mode === 'single' ? [] : (this.props.sort || []).filter(function (d) {\n      return d.field !== column.field;\n    });\n\n    if (dir !== '' && column.field) {\n      newDescriptor.push({\n        field: column.field,\n        dir: dir\n      });\n    }\n\n    this.props.onSortChange(newDescriptor, e);\n  };\n  /**\n   * @hidden\n   */\n\n\n  GridColumnMenuSort.prototype.render = function () {\n    var _a = this.props,\n        sort = _a.sort,\n        column = _a.column;\n    var currentSortIndex = sortIndex(column.field, sort);\n    var localizationService = provideLocalizationService(this);\n    return React.createElement(GridColumnMenuItemGroup, null, React.createElement(GridColumnMenuItem, {\n      title: localizationService.toLanguageString(sortAscending, messages[sortAscending]),\n      iconClass: 'k-i-sort-asc-sm',\n      selected: sortedAsc(currentSortIndex, sort),\n      onClick: this.onAscClick\n    }), React.createElement(GridColumnMenuItem, {\n      title: localizationService.toLanguageString(sortDescending, messages[sortDescending]),\n      iconClass: 'k-i-sort-desc-sm',\n      selected: sortedDesc(currentSortIndex, sort),\n      onClick: this.onDescClick\n    }));\n  }; // tslint:disable:max-line-length\n\n  /**\n   * Can be used to check if sorting is applied to a specific field ([see example]({% slug column_menu_grid %}#toc-styling-the-column-menu-icon)). Useful for creating active sort indicators.\n   */\n  // tslint:enable:max-line-length\n\n\n  GridColumnMenuSort.active = function (field, sort) {\n    var currentSortIndex = sortIndex(field, sort);\n    return sortedDesc(currentSortIndex, sort) || sortedAsc(currentSortIndex, sort);\n  };\n\n  return GridColumnMenuSort;\n}(React.Component);\n\nexport { GridColumnMenuSort };","map":null,"metadata":{},"sourceType":"module"}