function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import Picture from "./Picture";
import React from "react";
import cxs from "cxs/component";
import PropTypes from "prop-types";
var Wrapper = cxs("div")({
  width: "100%",
  height: "100%",
  position: "relative"
});
var PictureWrapper = cxs("div")({
  overflow: "hidden",
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  position: "absolute"
});

var Fullsized = function Fullsized(Component) {
  return function (_ref) {
    var className = _ref.className,
        wrapperClassName = _ref.wrapperClassName,
        children = _ref.children,
        rest = _objectWithoutPropertiesLoose(_ref, ["className", "wrapperClassName", "children"]);

    var PictureComponent = cxs(Component)(function (_ref2) {
      var _ref2$cover = _ref2.cover,
          cover = _ref2$cover === void 0 ? "both" : _ref2$cover,
          _ref2$center = _ref2.center,
          center = _ref2$center === void 0 ? true : _ref2$center;
      return {
        position: "absolute",
        top: center ? "50%" : 0,
        left: center ? "50%" : 0,
        transform: center ? "translate(-50%, -50%)" : "none",
        width: cover === "width" ? "100%" : "auto",
        height: cover === "height" ? "100%" : "auto",
        minHeight: cover === "both" ? "100%" : "none",
        minWidth: cover === "both" ? "100%" : "none"
      };
    });
    PictureComponent.propTypes = {
      center: PropTypes.bool,
      cover: PropTypes.string
    };
    return React.createElement(Wrapper, {
      className: wrapperClassName
    }, React.createElement(PictureWrapper, null, React.createElement(PictureComponent, _extends({
      className: className
    }, rest)), children));
  };
};

export default Fullsized(Picture);